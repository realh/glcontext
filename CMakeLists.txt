project(glcontext)
cmake_minimum_required(VERSION 2.8)
set(GLCTX_VERSION_MAJOR 1)
set(GLCTX_VERSION_MINOR 0)

set(GLCTX_SOVERSION ${GLCTX_VERSION_MAJOR})
set(GLCTX_VERSION_STRING "${GLCTX_VERSION_MAJOR}.${GLCTX_VERSION_MINOR}")

include(CMakeDependentOption)

option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(ENABLE_TEST "Build test" ON)

if(NOT MSVC)
    add_definitions(-Wall -Wextra -Wunused -Wwrite-strings)
endif()


# Work out platform/back-end
if(UNIX AND NOT APPLE)
    # Raspberry Pi?
    if(EXISTS "/opt/vc/include/EGL/egl.h")
        set(HAVE_RPI_INC 1)
    else()
        set(HAVE_RPI_INC 0)
    endif()
    if ("${MY_UNAME}" STREQUAL "armv6l GNU/Linux\n" AND HAVE_RPI_INC)
        option(ENABLE_RPI "Build for Raspberry Pi" ON)
    else()
        option(ENABLE_RPI "Build for Raspberry Pi" OFF)
    endif()
else()
    set(ENABLE_RPI OFF)
endif()

CMAKE_DEPENDENT_OPTION(ENABLE_EGL "Use EGL" OFF "NOT ENABLE_RPI" ON)

if(ENABLE_RPI)
    set(GLCTX_ENABLE_RPI 1)
else()
    set(GLCTX_ENABLE_RPI 0)
endif()

if(ENABLE_EGL)
    set(GLCTX_ENABLE_EGL 1)
    set(GLCTX_ENABLE_GLX 0)
    set(GLCTX_ENABLE_WGL 0)
    set(GLCTX_BACKEND_NAME "EGL")
else()
    set(GLCTX_ENABLE_EGL 0)
    if(WIN32)
        set(GLCTX_ENABLE_GLX 0)
        set(GLCTX_ENABLE_WGL 1)
        set(GLCTX_BACKEND_NAME "WGL")
    else()
        set(GLCTX_ENABLE_GLX 1)
        set(GLCTX_ENABLE_WGL 0)
        set(GLCTX_BACKEND_NAME "GLX")
    endif()
endif()

if(WIN32)
    set(GLCTX_MSWIN 1)
    set(GLCTX_X11 0)
else()
    set(GLCTX_MSWIN 0)
    set(GLCTX_X11 1)
endif()


# Find libraries we need
if(ENABLE_RPI)
    find_package(BcmHost REQUIRED)
    find_package(RPiEGL REQUIRED)
    set(GLCTX_INCLUDES ${EGL_INCLUDE_DIR} ${BCM_HOST_INCLUDE_DIR})
    set(GLCTX_LIBRARIES ${EGL_LIBRARY} ${BCM_HOST_LIBRARY})
elseif(ENABLE_EGL)
    find_package(EGL REQUIRED)
    set(GLCTX_INCLUDES ${EGL_INCLUDE_DIR})
    set(GLCTX_LIBRARIES ${EGL_LIBRARY})
elseif(ENABLE_GLX)
    find_package(X11 REQUIRED)
    set(GLCTX_INCLUDES ${X11_INCLUDE_DIR})
    set(GLCTX_LIBRARIES ${X11_LIBRARY})
elseif(ENABLE_WGL)
    find_package(OpenGL REQUIRED)
    set(GLCTX_INCLUDES ${OPENGL_INCLUDE_DIR})
    set(GLCTX_LIBRARIES ${OPENGL_gl_LIBRARY})
endif()

if(ENABLE_TEST)
    find_package(SDL 1.2 REQUIRED)
endif()
